"use strict";
// Copyright 2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0
// Licensed under the Amazon Software License  http://aws.amazon.com/asl/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SaveRatingRequestHandler = void 0;
var util = __importStar(require("../util"));
var config_1 = require("../config");
var log_rating_recorder_1 = require("../recorders/log-rating-recorder");
/* *
 * SaveRatingRequestHandler records the rating and returns the response to the skill.
 * It can be used to handle requests to the action specified by the saveRatingAction argument to the elicitRating reusable dialog.
 * This handler will be triggered when feedback is collected: rating
 * Response contains the rating details which maps to rating type in ACDL and display for APL template
 * */
var SaveRatingRequestHandler = /** @class */ (function () {
    function SaveRatingRequestHandler(apiName, ratingHandler, shouldEndSession) {
        if (apiName === void 0) { apiName = "".concat(config_1.feedbacknamespace, ".defaultSaveFeedbackAction"); }
        if (ratingHandler === void 0) { ratingHandler = new log_rating_recorder_1.LogRatingRecorder(); }
        if (shouldEndSession === void 0) { shouldEndSession = true; }
        this.apiName = apiName;
        if ("handleRating" in ratingHandler) {
            this.ratingHandler = ratingHandler;
        }
        else {
            this.ratingHandler = {
                "handleRating": ratingHandler
            };
        }
        this.shouldEndSession = shouldEndSession;
    }
    SaveRatingRequestHandler.prototype.canHandle = function (handlerInput) {
        return util.isApiRequest(handlerInput, this.apiName);
    };
    SaveRatingRequestHandler.prototype.handle = function (handlerInput) {
        var rating = util.getApiArguments(handlerInput).rating;
        this.ratingHandler.handleRating(rating);
        //response maps to rating type in ACDL
        var apiResponse = {
            rating: rating
        };
        /**
         * This handler acts as the entry point for your skill, routing all request and response
         * payloads to the handlers above. Make sure any new handlers or interceptors you've
         * defined are included below. The order matters - they're processed top to bottom
         * */
        return handlerInput.responseBuilder
            .withApiResponse(apiResponse)
            .withShouldEndSession(this.shouldEndSession)
            .getResponse();
    };
    return SaveRatingRequestHandler;
}());
exports.SaveRatingRequestHandler = SaveRatingRequestHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2F2ZS1yYXRpbmctaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2xhbWJkYS9oYW5kbGVycy9zYXZlLXJhdGluZy1oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSwwRUFBMEU7QUFDMUUsOERBQThEO0FBQzlELHlFQUF5RTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFJekUsNENBQWdDO0FBQ2hDLG9DQUE4QztBQUU5Qyx3RUFBb0U7QUFFcEU7Ozs7O0tBS0s7QUFDTDtJQUtJLGtDQUNJLE9BQW1FLEVBQ25FLGFBQXFGLEVBQ3JGLGdCQUFnQztRQUZoQyx3QkFBQSxFQUFBLG9CQUFzQiwwQkFBaUIsK0JBQTRCO1FBQ25FLDhCQUFBLEVBQUEsb0JBQWtFLHVDQUFpQixFQUFFO1FBQ3JGLGlDQUFBLEVBQUEsdUJBQWdDO1FBRWhDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksY0FBYyxJQUFJLGFBQWEsRUFBRTtZQUNqQyxJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQTtTQUNyQzthQUFNO1lBQ0gsSUFBSSxDQUFDLGFBQWEsR0FBRztnQkFDakIsY0FBYyxFQUFFLGFBQWE7YUFDaEMsQ0FBQztTQUNMO1FBQ0QsSUFBSSxDQUFDLGdCQUFnQixHQUFHLGdCQUFnQixDQUFBO0lBQzVDLENBQUM7SUFFRCw0Q0FBUyxHQUFULFVBQVUsWUFBMkI7UUFDakMsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDeEQsQ0FBQztJQUVELHlDQUFNLEdBQU4sVUFBTyxZQUEwQjtRQUM3QixJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUN6RCxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUV2QyxzQ0FBc0M7UUFDdEMsSUFBTSxXQUFXLEdBQUk7WUFDakIsTUFBTSxFQUFFLE1BQU07U0FDakIsQ0FBQztRQUNWOzs7O2FBSUs7UUFDRyxPQUFPLFlBQVksQ0FBQyxlQUFlO2FBQzlCLGVBQWUsQ0FBQyxXQUFXLENBQUM7YUFDNUIsb0JBQW9CLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDO2FBQzNDLFdBQVcsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFDTCwrQkFBQztBQUFELENBQUMsQUEzQ0QsSUEyQ0M7QUEzQ1ksNERBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjIgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBMaWNlbnNlUmVmLS5hbWF6b24uY29tLi1BbXpuU0wtMS4wXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQW1hem9uIFNvZnR3YXJlIExpY2Vuc2UgIGh0dHA6Ly9hd3MuYW1hem9uLmNvbS9hc2wvXG5cbmltcG9ydCB7IEhhbmRsZXJJbnB1dCwgUmVxdWVzdEhhbmRsZXIgfSBmcm9tICdhc2stc2RrLWNvcmUnO1xuaW1wb3J0IHsgaW50ZXJmYWNlcywgU2xvdFZhbHVlLCBSZXNwb25zZSB9IGZyb20gXCJhc2stc2RrLW1vZGVsXCI7XG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHsgZmVlZGJhY2tuYW1lc3BhY2UgfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IHsgUmF0aW5nUmVjb3JkZXIgfSBmcm9tICcuLi9yZWNvcmRlcnMvcmF0aW5nLXJlY29yZGVyJztcbmltcG9ydCB7IExvZ1JhdGluZ1JlY29yZGVyIH0gZnJvbSAnLi4vcmVjb3JkZXJzL2xvZy1yYXRpbmctcmVjb3JkZXInXG5cbi8qICpcbiAqIFNhdmVSYXRpbmdSZXF1ZXN0SGFuZGxlciByZWNvcmRzIHRoZSByYXRpbmcgYW5kIHJldHVybnMgdGhlIHJlc3BvbnNlIHRvIHRoZSBza2lsbC4gXG4gKiBJdCBjYW4gYmUgdXNlZCB0byBoYW5kbGUgcmVxdWVzdHMgdG8gdGhlIGFjdGlvbiBzcGVjaWZpZWQgYnkgdGhlIHNhdmVSYXRpbmdBY3Rpb24gYXJndW1lbnQgdG8gdGhlIGVsaWNpdFJhdGluZyByZXVzYWJsZSBkaWFsb2cuXG4gKiBUaGlzIGhhbmRsZXIgd2lsbCBiZSB0cmlnZ2VyZWQgd2hlbiBmZWVkYmFjayBpcyBjb2xsZWN0ZWQ6IHJhdGluZ1xuICogUmVzcG9uc2UgY29udGFpbnMgdGhlIHJhdGluZyBkZXRhaWxzIHdoaWNoIG1hcHMgdG8gcmF0aW5nIHR5cGUgaW4gQUNETCBhbmQgZGlzcGxheSBmb3IgQVBMIHRlbXBsYXRlXG4gKiAqL1xuZXhwb3J0IGNsYXNzIFNhdmVSYXRpbmdSZXF1ZXN0SGFuZGxlciBpbXBsZW1lbnRzIFJlcXVlc3RIYW5kbGVyIHtcbiAgICBwcml2YXRlIGFwaU5hbWUgOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSByYXRpbmdIYW5kbGVyIDogUmF0aW5nUmVjb3JkZXI7XG4gICAgcHJpdmF0ZSBzaG91bGRFbmRTZXNzaW9uOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGFwaU5hbWUgOiBzdHJpbmcgPSBgJHtmZWVkYmFja25hbWVzcGFjZX0uZGVmYXVsdFNhdmVGZWVkYmFja0FjdGlvbmAsIFxuICAgICAgICByYXRpbmdIYW5kbGVyIDogUmF0aW5nUmVjb3JkZXIgfCAoKHJhdGluZzogbnVtYmVyKSA9PiB2b2lkKSA9IG5ldyBMb2dSYXRpbmdSZWNvcmRlcigpLFxuICAgICAgICBzaG91bGRFbmRTZXNzaW9uOiBib29sZWFuID0gdHJ1ZVxuICAgICkge1xuICAgICAgICB0aGlzLmFwaU5hbWUgPSBhcGlOYW1lO1xuICAgICAgICBpZiAoXCJoYW5kbGVSYXRpbmdcIiBpbiByYXRpbmdIYW5kbGVyKSB7XG4gICAgICAgICAgICB0aGlzLnJhdGluZ0hhbmRsZXIgPSByYXRpbmdIYW5kbGVyIFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yYXRpbmdIYW5kbGVyID0ge1xuICAgICAgICAgICAgICAgIFwiaGFuZGxlUmF0aW5nXCI6IHJhdGluZ0hhbmRsZXJcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zaG91bGRFbmRTZXNzaW9uID0gc2hvdWxkRW5kU2Vzc2lvblxuICAgIH1cblxuICAgIGNhbkhhbmRsZShoYW5kbGVySW5wdXQgOiBIYW5kbGVySW5wdXQpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHV0aWwuaXNBcGlSZXF1ZXN0KGhhbmRsZXJJbnB1dCwgdGhpcy5hcGlOYW1lKSBcbiAgICB9XG5cbiAgICBoYW5kbGUoaGFuZGxlcklucHV0OiBIYW5kbGVySW5wdXQgKSB7XG4gICAgICAgIGNvbnN0IHJhdGluZyA9IHV0aWwuZ2V0QXBpQXJndW1lbnRzKGhhbmRsZXJJbnB1dCkucmF0aW5nO1xuICAgICAgICB0aGlzLnJhdGluZ0hhbmRsZXIuaGFuZGxlUmF0aW5nKHJhdGluZylcbiAgICAgICAgXG4gICAgICAgIC8vcmVzcG9uc2UgbWFwcyB0byByYXRpbmcgdHlwZSBpbiBBQ0RMXG4gICAgICAgIGNvbnN0IGFwaVJlc3BvbnNlID0gIHtcbiAgICAgICAgICAgIHJhdGluZzogcmF0aW5nXG4gICAgICAgIH07XG4vKipcbiAqIFRoaXMgaGFuZGxlciBhY3RzIGFzIHRoZSBlbnRyeSBwb2ludCBmb3IgeW91ciBza2lsbCwgcm91dGluZyBhbGwgcmVxdWVzdCBhbmQgcmVzcG9uc2VcbiAqIHBheWxvYWRzIHRvIHRoZSBoYW5kbGVycyBhYm92ZS4gTWFrZSBzdXJlIGFueSBuZXcgaGFuZGxlcnMgb3IgaW50ZXJjZXB0b3JzIHlvdSd2ZVxuICogZGVmaW5lZCBhcmUgaW5jbHVkZWQgYmVsb3cuIFRoZSBvcmRlciBtYXR0ZXJzIC0gdGhleSdyZSBwcm9jZXNzZWQgdG9wIHRvIGJvdHRvbVxuICogKi9cbiAgICAgICAgcmV0dXJuIGhhbmRsZXJJbnB1dC5yZXNwb25zZUJ1aWxkZXJcbiAgICAgICAgICAgIC53aXRoQXBpUmVzcG9uc2UoYXBpUmVzcG9uc2UpXG4gICAgICAgICAgICAud2l0aFNob3VsZEVuZFNlc3Npb24odGhpcy5zaG91bGRFbmRTZXNzaW9uKVxuICAgICAgICAgICAgLmdldFJlc3BvbnNlKCk7XG4gICAgfVxufSJdfQ==