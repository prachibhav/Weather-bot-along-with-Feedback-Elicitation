"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getResolvedApiSlotIds = exports.getSlotResolvedId = exports.getResolvedApiSlotValues = exports.getSlotResolvedValue = exports.getApiSlots = exports.getApiArguments = exports.isApiRequestPrefix = exports.isApiRequest = exports.getAPIName = void 0;
var ask_sdk_core_1 = require("ask-sdk-core");
var _ = __importStar(require("lodash"));
var getAPIName = function (handlerInput) {
    var _a;
    return (_a = handlerInput.requestEnvelope.request.apiRequest) === null || _a === void 0 ? void 0 : _a.name;
};
exports.getAPIName = getAPIName;
/**
 * Helper method to find if a request is a API request, optionally for a specific API
 */
var isApiRequest = function (handlerInput, apiName) {
    var isApiRequest = (0, ask_sdk_core_1.getRequestType)(handlerInput.requestEnvelope) === 'Dialog.API.Invoked';
    if (apiName) {
        return isApiRequest && (0, exports.getAPIName)(handlerInput) === apiName;
    }
    else {
        return isApiRequest;
    }
};
exports.isApiRequest = isApiRequest;
var isApiRequestPrefix = function (handlerInput, apiName) {
    var _a;
    var isApiRequest = (0, ask_sdk_core_1.getRequestType)(handlerInput.requestEnvelope) === 'Dialog.API.Invoked';
    return isApiRequest && (((_a = (0, exports.getAPIName)(handlerInput)) === null || _a === void 0 ? void 0 : _a.startsWith(apiName)) || false);
};
exports.isApiRequestPrefix = isApiRequestPrefix;
/**
 * Helper method to get API request entity from the request envelope.
 */
var getApiArguments = function (handlerInput) {
    var _a;
    return ((_a = handlerInput.requestEnvelope.request.apiRequest) === null || _a === void 0 ? void 0 : _a.arguments) || {};
};
exports.getApiArguments = getApiArguments;
/**
 * Helper method to get API resolved entity from the request envelope.
 */
var getApiSlots = function (handlerInput) {
    var _a;
    return ((_a = handlerInput.requestEnvelope.request.apiRequest) === null || _a === void 0 ? void 0 : _a.slots) || {};
};
exports.getApiSlots = getApiSlots;
var getSlotResolvedValue = function (slot) {
    var firstAuthority = _.first(_.get(slot, 'resolutions.resolutionsPerAuthority'));
    var firstAuthorityValue = _.first(_.get(firstAuthority, 'values'));
    return _.get(firstAuthorityValue, 'value.name');
};
exports.getSlotResolvedValue = getSlotResolvedValue;
var getResolvedApiSlotValues = function (handlerInput) {
    var e_1, _a;
    var slots = (0, exports.getApiSlots)(handlerInput);
    var resolvedSlotValues = {};
    try {
        for (var _b = __values(Object.keys(slots)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var slotName = _c.value;
            resolvedSlotValues[slotName] = (0, exports.getSlotResolvedValue)(slots[slotName]);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return resolvedSlotValues;
};
exports.getResolvedApiSlotValues = getResolvedApiSlotValues;
var getSlotResolvedId = function (slot) {
    var firstAuthority = _.first(_.get(slot, 'resolutions.resolutionsPerAuthority'));
    var firstAuthorityValue = _.first(_.get(firstAuthority, 'values'));
    return _.get(firstAuthorityValue, 'value.id');
};
exports.getSlotResolvedId = getSlotResolvedId;
var getResolvedApiSlotIds = function (handlerInput) {
    var e_2, _a;
    var slots = (0, exports.getApiSlots)(handlerInput);
    var resolvedSlotIds = {};
    try {
        for (var _b = __values(Object.keys(slots)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var slotName = _c.value;
            resolvedSlotIds[slotName] = (0, exports.getSlotResolvedId)(slots[slotName]);
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return resolvedSlotIds;
};
exports.getResolvedApiSlotIds = getResolvedApiSlotIds;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL2xhbWJkYS91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSw2Q0FBNEQ7QUFHNUQsd0NBQTRCO0FBRXJCLElBQU0sVUFBVSxHQUFHLFVBQUMsWUFBMkI7O0lBQ2xELE9BQU8sTUFBQyxZQUFZLENBQUMsZUFBZSxDQUFDLE9BQWdDLENBQUMsVUFBVSwwQ0FBRSxJQUFJLENBQUM7QUFDM0YsQ0FBQyxDQUFDO0FBRlcsUUFBQSxVQUFVLGNBRXJCO0FBRUY7O0dBRUc7QUFDSSxJQUFNLFlBQVksR0FBRyxVQUFDLFlBQTJCLEVBQUUsT0FBaUI7SUFDdkUsSUFBTSxZQUFZLEdBQUcsSUFBQSw2QkFBYyxFQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsS0FBSyxvQkFBb0IsQ0FBQztJQUUzRixJQUFJLE9BQU8sRUFBRTtRQUNULE9BQU8sWUFBWSxJQUFJLElBQUEsa0JBQVUsRUFBQyxZQUFZLENBQUMsS0FBSyxPQUFPLENBQUM7S0FDL0Q7U0FBTTtRQUNILE9BQU8sWUFBWSxDQUFDO0tBQ3ZCO0FBQ0wsQ0FBQyxDQUFDO0FBUlcsUUFBQSxZQUFZLGdCQVF2QjtBQUNLLElBQU0sa0JBQWtCLEdBQUcsVUFBQyxZQUEyQixFQUFFLE9BQWdCOztJQUM1RSxJQUFNLFlBQVksR0FBRyxJQUFBLDZCQUFjLEVBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxLQUFLLG9CQUFvQixDQUFDO0lBRTNGLE9BQU8sWUFBWSxJQUFJLENBQUMsQ0FBQSxNQUFBLElBQUEsa0JBQVUsRUFBQyxZQUFZLENBQUMsMENBQUUsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFJLEtBQUssQ0FBQyxDQUFDO0FBQ3BGLENBQUMsQ0FBQztBQUpXLFFBQUEsa0JBQWtCLHNCQUk3QjtBQUVGOztHQUVHO0FBQ0ksSUFBTSxlQUFlLEdBQUcsVUFBQyxZQUEyQjs7SUFDdkQsT0FBTyxDQUFBLE1BQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxPQUFnQyxDQUFDLFVBQVUsMENBQUUsU0FBUyxLQUFJLEVBQUUsQ0FBQztBQUN0RyxDQUFDLENBQUM7QUFGVyxRQUFBLGVBQWUsbUJBRTFCO0FBRUY7O0dBRUc7QUFDSSxJQUFNLFdBQVcsR0FBRyxVQUFDLFlBQTJCOztJQUNuRCxPQUFPLENBQUEsTUFBQyxZQUFZLENBQUMsZUFBZSxDQUFDLE9BQWdDLENBQUMsVUFBVSwwQ0FBRSxLQUFLLEtBQUksRUFBRSxDQUFDO0FBQ2xHLENBQUMsQ0FBQztBQUZXLFFBQUEsV0FBVyxlQUV0QjtBQUVLLElBQU0sb0JBQW9CLEdBQUcsVUFBQyxJQUFnQjtJQUNqRCxJQUFNLGNBQWMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLHFDQUFxQyxDQUFDLENBQUMsQ0FBQztJQUNuRixJQUFNLG1CQUFtQixHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUNyRSxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDcEQsQ0FBQyxDQUFDO0FBSlcsUUFBQSxvQkFBb0Isd0JBSS9CO0FBRUssSUFBTSx3QkFBd0IsR0FBRyxVQUFDLFlBQTJCOztJQUNoRSxJQUFNLEtBQUssR0FBRyxJQUFBLG1CQUFXLEVBQUMsWUFBWSxDQUFDLENBQUM7SUFFeEMsSUFBTSxrQkFBa0IsR0FBUyxFQUFFLENBQUM7O1FBQ3BDLEtBQXNCLElBQUEsS0FBQSxTQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUEsZ0JBQUEsNEJBQUM7WUFBckMsSUFBTSxRQUFRLFdBQUE7WUFDZCxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFBLDRCQUFvQixFQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1NBQ3hFOzs7Ozs7Ozs7SUFDRCxPQUFPLGtCQUFrQixDQUFDO0FBQzlCLENBQUMsQ0FBQztBQVJXLFFBQUEsd0JBQXdCLDRCQVFuQztBQUVLLElBQU0saUJBQWlCLEdBQUcsVUFBQyxJQUFlO0lBQzdDLElBQU0sY0FBYyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUscUNBQXFDLENBQUMsQ0FBQyxDQUFDO0lBQ25GLElBQU0sbUJBQW1CLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ3JFLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNsRCxDQUFDLENBQUM7QUFKVyxRQUFBLGlCQUFpQixxQkFJNUI7QUFFSyxJQUFNLHFCQUFxQixHQUFHLFVBQUMsWUFBMkI7O0lBQzdELElBQU0sS0FBSyxHQUFHLElBQUEsbUJBQVcsRUFBQyxZQUFZLENBQUMsQ0FBQztJQUV4QyxJQUFNLGVBQWUsR0FBUyxFQUFFLENBQUM7O1FBQ2pDLEtBQXNCLElBQUEsS0FBQSxTQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUEsZ0JBQUEsNEJBQUM7WUFBckMsSUFBTSxRQUFRLFdBQUE7WUFDZCxlQUFlLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBQSx5QkFBaUIsRUFBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztTQUNsRTs7Ozs7Ozs7O0lBQ0QsT0FBTyxlQUFlLENBQUM7QUFDM0IsQ0FBQyxDQUFDO0FBUlcsUUFBQSxxQkFBcUIseUJBUWhDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0UmVxdWVzdFR5cGUsIEhhbmRsZXJJbnB1dCB9IGZyb20gJ2Fzay1zZGstY29yZSc7XG5pbXBvcnQgeyBpbnRlcmZhY2VzLCBTbG90VmFsdWUgfSBmcm9tIFwiYXNrLXNkay1tb2RlbFwiO1xuaW1wb3J0IEFQSUludm9jYXRpb25SZXF1ZXN0ID0gaW50ZXJmYWNlcy5jb252ZXJzYXRpb25zLkFQSUludm9jYXRpb25SZXF1ZXN0O1xuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xuXG5leHBvcnQgY29uc3QgZ2V0QVBJTmFtZSA9IChoYW5kbGVySW5wdXQgOiBIYW5kbGVySW5wdXQpID0+IHtcbiAgICByZXR1cm4gKGhhbmRsZXJJbnB1dC5yZXF1ZXN0RW52ZWxvcGUucmVxdWVzdCBhcyBBUElJbnZvY2F0aW9uUmVxdWVzdCkuYXBpUmVxdWVzdD8ubmFtZTtcbn07XG5cbi8qKlxuICogSGVscGVyIG1ldGhvZCB0byBmaW5kIGlmIGEgcmVxdWVzdCBpcyBhIEFQSSByZXF1ZXN0LCBvcHRpb25hbGx5IGZvciBhIHNwZWNpZmljIEFQSVxuICovXG5leHBvcnQgY29uc3QgaXNBcGlSZXF1ZXN0ID0gKGhhbmRsZXJJbnB1dCA6IEhhbmRsZXJJbnB1dCwgYXBpTmFtZT8gOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBpc0FwaVJlcXVlc3QgPSBnZXRSZXF1ZXN0VHlwZShoYW5kbGVySW5wdXQucmVxdWVzdEVudmVsb3BlKSA9PT0gJ0RpYWxvZy5BUEkuSW52b2tlZCc7XG5cbiAgICBpZiAoYXBpTmFtZSkge1xuICAgICAgICByZXR1cm4gaXNBcGlSZXF1ZXN0ICYmIGdldEFQSU5hbWUoaGFuZGxlcklucHV0KSA9PT0gYXBpTmFtZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gaXNBcGlSZXF1ZXN0O1xuICAgIH1cbn07XG5leHBvcnQgY29uc3QgaXNBcGlSZXF1ZXN0UHJlZml4ID0gKGhhbmRsZXJJbnB1dCA6IEhhbmRsZXJJbnB1dCwgYXBpTmFtZSA6IHN0cmluZyk6IGJvb2xlYW4gPT4ge1xuICAgIGNvbnN0IGlzQXBpUmVxdWVzdCA9IGdldFJlcXVlc3RUeXBlKGhhbmRsZXJJbnB1dC5yZXF1ZXN0RW52ZWxvcGUpID09PSAnRGlhbG9nLkFQSS5JbnZva2VkJztcblxuICAgIHJldHVybiBpc0FwaVJlcXVlc3QgJiYgKGdldEFQSU5hbWUoaGFuZGxlcklucHV0KT8uc3RhcnRzV2l0aChhcGlOYW1lKSB8fCBmYWxzZSk7XG59O1xuXG4vKipcbiAqIEhlbHBlciBtZXRob2QgdG8gZ2V0IEFQSSByZXF1ZXN0IGVudGl0eSBmcm9tIHRoZSByZXF1ZXN0IGVudmVsb3BlLlxuICovXG5leHBvcnQgY29uc3QgZ2V0QXBpQXJndW1lbnRzID0gKGhhbmRsZXJJbnB1dCA6IEhhbmRsZXJJbnB1dCkgPT4ge1xuICAgIHJldHVybiAoaGFuZGxlcklucHV0LnJlcXVlc3RFbnZlbG9wZS5yZXF1ZXN0IGFzIEFQSUludm9jYXRpb25SZXF1ZXN0KS5hcGlSZXF1ZXN0Py5hcmd1bWVudHMgfHwge307XG59O1xuXG4vKipcbiAqIEhlbHBlciBtZXRob2QgdG8gZ2V0IEFQSSByZXNvbHZlZCBlbnRpdHkgZnJvbSB0aGUgcmVxdWVzdCBlbnZlbG9wZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGdldEFwaVNsb3RzID0gKGhhbmRsZXJJbnB1dCA6IEhhbmRsZXJJbnB1dCkgPT4ge1xuICAgIHJldHVybiAoaGFuZGxlcklucHV0LnJlcXVlc3RFbnZlbG9wZS5yZXF1ZXN0IGFzIEFQSUludm9jYXRpb25SZXF1ZXN0KS5hcGlSZXF1ZXN0Py5zbG90cyB8fCB7fTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRTbG90UmVzb2x2ZWRWYWx1ZSA9IChzbG90IDogU2xvdFZhbHVlKSA9PiB7XG4gICAgY29uc3QgZmlyc3RBdXRob3JpdHkgPSBfLmZpcnN0KF8uZ2V0KHNsb3QsICdyZXNvbHV0aW9ucy5yZXNvbHV0aW9uc1BlckF1dGhvcml0eScpKTtcbiAgICBjb25zdCBmaXJzdEF1dGhvcml0eVZhbHVlID0gXy5maXJzdChfLmdldChmaXJzdEF1dGhvcml0eSwgJ3ZhbHVlcycpKTtcbiAgICByZXR1cm4gXy5nZXQoZmlyc3RBdXRob3JpdHlWYWx1ZSwgJ3ZhbHVlLm5hbWUnKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRSZXNvbHZlZEFwaVNsb3RWYWx1ZXMgPSAoaGFuZGxlcklucHV0IDogSGFuZGxlcklucHV0KSA9PiB7XG4gICAgY29uc3Qgc2xvdHMgPSBnZXRBcGlTbG90cyhoYW5kbGVySW5wdXQpO1xuXG4gICAgY29uc3QgcmVzb2x2ZWRTbG90VmFsdWVzIDogYW55ID0ge307XG4gICAgZm9yKGNvbnN0IHNsb3ROYW1lIG9mIE9iamVjdC5rZXlzKHNsb3RzKSl7XG4gICAgICAgIHJlc29sdmVkU2xvdFZhbHVlc1tzbG90TmFtZV0gPSBnZXRTbG90UmVzb2x2ZWRWYWx1ZShzbG90c1tzbG90TmFtZV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzb2x2ZWRTbG90VmFsdWVzO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFNsb3RSZXNvbHZlZElkID0gKHNsb3Q6IFNsb3RWYWx1ZSkgPT4ge1xuICAgIGNvbnN0IGZpcnN0QXV0aG9yaXR5ID0gXy5maXJzdChfLmdldChzbG90LCAncmVzb2x1dGlvbnMucmVzb2x1dGlvbnNQZXJBdXRob3JpdHknKSk7XG4gICAgY29uc3QgZmlyc3RBdXRob3JpdHlWYWx1ZSA9IF8uZmlyc3QoXy5nZXQoZmlyc3RBdXRob3JpdHksICd2YWx1ZXMnKSk7XG4gICAgcmV0dXJuIF8uZ2V0KGZpcnN0QXV0aG9yaXR5VmFsdWUsICd2YWx1ZS5pZCcpO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFJlc29sdmVkQXBpU2xvdElkcyA9IChoYW5kbGVySW5wdXQgOiBIYW5kbGVySW5wdXQpID0+IHtcbiAgICBjb25zdCBzbG90cyA9IGdldEFwaVNsb3RzKGhhbmRsZXJJbnB1dCk7XG5cbiAgICBjb25zdCByZXNvbHZlZFNsb3RJZHMgOiBhbnkgPSB7fTtcbiAgICBmb3IoY29uc3Qgc2xvdE5hbWUgb2YgT2JqZWN0LmtleXMoc2xvdHMpKXtcbiAgICAgICAgcmVzb2x2ZWRTbG90SWRzW3Nsb3ROYW1lXSA9IGdldFNsb3RSZXNvbHZlZElkKHNsb3RzW3Nsb3ROYW1lXSk7XG4gICAgfVxuICAgIHJldHVybiByZXNvbHZlZFNsb3RJZHM7XG59O1xuIl19